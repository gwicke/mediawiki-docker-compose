#!/usr/bin/env python
import argparse
import subprocess
from subprocess import check_output, Popen, PIPE, STDOUT


def get_minikube_ip():
    """
    Get the minikube ip
    """
    # XXX: Sudo is needed on Linux. What about OSX and Win?
    return check_output(['sudo', 'minikube', 'ip'])

def kubectl_apply_config(config):
    cmd = ['kubectl', 'apply', '-f', '-']
    p = Popen(cmd, stdout=PIPE, stdin=PIPE, stderr=STDOUT)    
    stdout = p.communicate(input=config)[0]
    if p.returncode != 0:
        raise subprocess.CalledProcessError(p.returncode, cmd, stdout)
    return stdout

def kubectl_delete_config(config):
    p = Popen(['kubectl', 'delete', '-f', '-'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)    
    return p.communicate(input=config)[0]

def cmd_develop(args):
    """
    Prepare a service for development:
    - Check out service repository (in src/)
    - Mount checkout inside service container
    """
    print 'develop', args

def cmd_apply(args):
    """
    Apply a change in the dev environment
    - Check whether the service is already checked out / "develop" was called
    - Update dependencies inside container
    - If necessary, restart service.
    """
    print kubectl_apply_config('foo');
    print 'apply', args, get_minikube_ip()

def cmd_test(args):
    """
    Spin up a new container for this service, and run tests.
    - Check whether the service is already checked out / "develop" was called
    - Spin up a new container
    - Update dependencies inside container
    - If necessary, restart service.
    - run test command
    """
    print 'test', args, get_minikube_ip()


def main():
    parser = argparse.ArgumentParser(
        description='Install and drive the mediawiki-containers development environment.')
    subparsers = parser.add_subparsers(help='Available commands')

    # create the parser for the "develop" command
    parser_develop = subparsers.add_parser('develop', 
            help='Prepare a service for development')
    parser_develop.add_argument('service', nargs='+', 
        help='Name of service you would like to develop')
    parser_develop.set_defaults(func=cmd_develop)

    # create the parser for the "apply" command
    parser_apply = subparsers.add_parser('apply', 
            help='Apply a change in the dev environment')
    parser_apply.add_argument('service', nargs='+', 
        help='Name of service whose changes you would like to apply.')
    parser_apply.set_defaults(func=cmd_apply)

    # create the parser for the "test" command
    parser_apply = subparsers.add_parser('test', 
            help='Test a service in a fresh container.')
    parser_apply.add_argument('service', nargs='+', 
        help='Name of service whose changes you would like to test.')
    parser_apply.set_defaults(func=cmd_test)

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
